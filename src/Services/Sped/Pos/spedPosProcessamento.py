import asyncio

from .Etapas.fornecedorService import FornecedorService, FornecedorRepository
from .Etapas.c170NovaService import C170NovaService, C170NovaRepository
from .Etapas.tributacaoService import TributacaoService, TributacaoRepository
from .Etapas.aliquotaService import AliquotaService
from .Etapas.cloneService import ClonagemService

from .Etapas.Calculo.atualizarAliquotaService import AtualizarAliquotaRepository, AtualizarAliquotaService
from .Etapas.Calculo.aliquotaSimplesService import AliquotaSimplesService, AliquotaSimplesRepository
from .Etapas.Calculo.calculoResultadoService import CalculoResultadoService, CalculoResultadoRepository

from src.Utils.periodo import obterPeriodo
from src.Config.Database.db import SessionLocal  

class PosProcessamentoService:
    def __init__(self, session, empresa_id):
        self.session = session
        self.empresa_id = empresa_id

    async def executarPre(self):
        print(f"[POS] Iniciando pr√©-processamento de al√≠quotas para empresa_id={self.empresa_id}...")

        etapas = [
            self.etapaFornecedor,
            self.etapaC170Nova,
            self.etapaTributacao,
            self.etapaAliquotas,
        ]

        for idx, etapa in enumerate(etapas, start=1):
            resultado = await etapa()
            if resultado == "parar":
                return {"status": "pendente_aliquota", "etapa_pos": idx}

        return {"status": "ok"}

    async def executarPos(self):
        print(f"[POS] Iniciando p√≥s-processamento ap√≥s preenchimento de al√≠quotas para empresa_id={self.empresa_id}...")

        etapas = [
            self.etapaClonagem,
            self.etapaAtualizarAliquotas,
            self.etapaAliquotaSimples,
            self.etapaCalculoResultado,
        ]

        for idx, etapa in enumerate(etapas, start=5):
            await etapa()

        print("[POS] P√≥s-processamento finalizado.")
        return {"status": "ok"}

    async def etapaFornecedor(self):
        repo = FornecedorRepository(self.session)
        fornecedorService = FornecedorService(repo)
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(None, fornecedorService.processar, self.empresa_id)
        print("[POS] Fornecedores atualizados.")
        return None

    async def etapaC170Nova(self):
        repo = C170NovaRepository(self.session)
        service = C170NovaService(repo)
        service.preencher(self.empresa_id)
        print("[POS] Tabela c170nova criada e preenchida.")
        return None

    async def etapaTributacao(self):
        repo = TributacaoRepository(self.session)
        service = TributacaoService(repo)
        service.preencher(self.empresa_id)
        print("[POS] Cadastro de tributa√ß√£o preenchido com base na tabela 0200.")
        return None

    async def etapaAliquotas(self):
        """Verificar se existem al√≠quotas pendentes"""
        print("[POS] üîç Verificando al√≠quotas pendentes...")
        
        try:
            # Verifica√ß√£o principal
            aliquotaService = AliquotaService(lambda: self.session)
            dadosPendentes = aliquotaService.verificarPopupAliquota(self.empresa_id)
            
            print(f"[POS] üìä verificarPopupAliquota() retornou: {dadosPendentes}")
            
            if dadosPendentes:
                # ‚úÖ Verificar se realmente h√° dados para listar
                from src.Services.Aliquotas.aliquotaPoupService import AliquotaPoupService
                aliquota_poup = AliquotaPoupService(self.session)
                lista_faltantes = aliquota_poup.listarFaltantes(self.empresa_id)
                
                print(f"[POS] üìã listarFaltantes() retornou: {len(lista_faltantes) if lista_faltantes else 0} itens")
                print(f"[POS] üîç Primeiros 3 itens: {lista_faltantes[:3] if lista_faltantes else 'Nenhum'}")
                
                # ‚úÖ NOVA L√ìGICA: Se n√£o h√° dados para listar, continuar processamento
                if not lista_faltantes or len(lista_faltantes) == 0:
                    print("[POS] ‚ö†Ô∏è Inconsist√™ncia detectada: verificarPopupAliquota=True mas listarFaltantes=vazio")
                    print("[POS] ‚úÖ Assumindo que n√£o h√° al√≠quotas pendentes reais. Continuando processamento...")
                    return None
                
                print("[POS] ‚ö†Ô∏è Al√≠quotas pendentes encontradas. Interven√ß√£o do usu√°rio necess√°ria.")
                return "parar"
            
            print("[POS] ‚úÖ Nenhuma al√≠quota pendente encontrada.")
            return None
            
        except Exception as e:
            print(f"[ERRO] ‚ùå Erro ao verificar al√≠quotas: {e}")
            import traceback
            traceback.print_exc()
            return None

    async def etapaClonagem(self):
        clonagemService = ClonagemService(lambda: self.session)
        clonagemService.clonarC170Nova(self.empresa_id)
        print("[POS] Tabela c170_clone criada com sucesso.")
        return None

    async def etapaAtualizarAliquotas(self):
        repo = AtualizarAliquotaRepository(self.session)
        service = AtualizarAliquotaService(repo)
        service.atualizar(self.empresa_id)
        print("[POS] Al√≠quotas atualizadas com sucesso.")
        return None

    async def etapaAliquotaSimples(self):
        repo = AliquotaSimplesRepository(self.session)
        service = AliquotaSimplesService(repo)
        print("[POS] Obtendo per√≠odo atual...")
        periodo = obterPeriodo(self.session, self.empresa_id)
        print(f"[POS] Per√≠odo obtido: {periodo}. Atualizando al√≠quotas Simples Nacional...")
        service.atualizar(self.empresa_id, periodo)
        print("[POS] Al√≠quotas Simples Nacional atualizadas com sucesso.")
        return None

    async def etapaCalculoResultado(self):
        try:
            print("[POS] Iniciando c√°lculo de resultados ICMS...")
            
            repo = CalculoResultadoRepository(SessionLocal)
            service = CalculoResultadoService(repo, SessionLocal)

            resultado = await service.calcular(self.empresa_id, estrategia="lotes_paralelo")            
            print("[POS] ‚úÖ C√°lculo de resultados ICMS finalizado com sucesso.")
            return resultado
            
        except Exception as e:
            print(f"[ERRO] ‚ùå Falha no c√°lculo de resultados: {e}")
            import traceback
            traceback.print_exc()
            raise

